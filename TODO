
- There is a lot of heartbeat overhead. See if we can reduce that.
- Get ssh extension mode to be compatible with ssh multiplexing so
  it only requires a single gnubby touch.
- Reset TERM if someone reattaches from a new terminal type.
- Reload config if we get a SIGHUP
- Implement spooling logic to handle subprocesses which generate
  a bunch of output after we have detached.
- Fix echo bug in ssh plugin mode. For some reason the tty echo seems
  to work differently for ssh plugin mode, so we see commands twice if
  we enable echo for the pty as normal. Disabling pty echo
  explicitly helps a bit, but we still get double newlines for some reason.
- Add a keybinding for detaching. Make it simpler than tmux or screen since
  this will be the only keybinding. Make it configurable in the toml file
  with at least enough flexibility to allow tmux users to use their normal
  "C-a d" keybinding.
- SIGWINCH appears to redraw the shell prompt some of the time, but not
  always on reconnect https://screencast.googleplex.com/cast/NjM5ODM3MzQ1MzEwMzEwNHwzZTRiNjJmYy1iNg shows the problem.
- steal the rustfmt config from wprs https://user.git.corp.google.com/rasputin/wprs/+/refs/heads/main/rustfmt.toml
- look into switching from the log to tracing https://docs.rs/tracing/latest/tracing/
    it looks like there is a compatibility layer
    (https://user.git.corp.google.com/rasputin/wprs/+/refs/heads/main/src/utils.rs#41
    shows how to configure it to generate output)
- Set client env vars on reconnect as well as the initial connection. SSH_AUTH_SOCK
  can change between login sessions.
    - This is harder than it first appears since you can't change environment variables
      within a child process after you launch it.
    - As an alternative to updating the environment variables, we can redo the feature
      to only focus on SSH_AUTH_SOCK since the other env vars are not really needed.
      Rather than directly setting the value from the client, we instead create a
      simlink to the auth sock, then set that simlink as the SSH_AUTH_SOCK value.
      On reconnect, we simply update the simlink to point to the new SSH_AUTH_SOCK
      concrete value. This way the value of the environment variable within
      shpool will not change, but we can redirect it to point to the correct
      socket on reconnect.
    - I came up with some other schemes to use LD_PRELOAD or gdb to update the
      environment variables, but those approaches are too cursed.
- Shpool introduces more lag than it should http://screencast/cast/NjU4Nzk0MTA3MDU2OTQ3MnxkYzhmZjhhZS00Nw


There is a cool pair of signals that might be useful for dealing with IO
from the shell after a network drop. SIGTIN/SIGTOUT suspend a background
process if they try to read or write to the termianl. It causes them
to pause and wait for a SIGCONT just like ^Z does. This might present an
alternative approach instead of spooling the output.
